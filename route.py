from typing import Dict

from util import extract_xml, llm_call


def route(input: str, routes: Dict[str, str]) -> str:
    """コンテンツ分類を用いて、入力を専門のプロンプトに振り分ける。"""
    # まず、チェーン・オブ・ソート（思考過程）を用いてLLMで適切なルートを決定する
    print(f"\n利用可能なルート: {list(routes.keys())}")
    selector_prompt = f"""
    入力内容を解析し、以下のオプションから最も適切なサポートチームを選択してください: {list(routes.keys())}
    まず、なぜそのチームに振り分けるべきか理由を説明してください。その後、以下のXML形式で選択を示してください:

    <reasoning>
    このチケットを特定のチームに振り分ける理由の簡単な説明。
    キーワード、ユーザーの意図、緊急度などを考慮してください。
    </reasoning>

    <selection>
    選択されたチーム名
    </selection>

    入力: {input}""".strip()

    route_response = llm_call(selector_prompt)
    reasoning = extract_xml(route_response, "reasoning")
    route_key = extract_xml(route_response, "selection").strip().lower()

    print("ルーティング分析:")
    print(reasoning)
    print(f"\n選択されたルート: {route_key}")

    # 選択された専門プロンプトを用いて入力を処理する
    selected_prompt = routes[route_key]
    return llm_call(f"{selected_prompt}\n入力: {input}")


if __name__ == "__main__":
    support_routes = {
        "billing": """あなたは請求サポートの専門家です。以下のガイドラインに従ってください：
        1. 必ず「請求サポート回答:」で始めること。
        2. まず、具体的な請求に関する問題を認識すること。
        3. 料金や不一致について明確に説明すること。
        4. 具体的な次のステップとタイムラインをリストアップすること。
        5. 必要に応じて支払いオプションを最後に記載すること。
        
        回答はプロフェッショナルでありながら、親しみやすい口調にしてください。
        
        入力: """,
        "technical": """あなたは技術サポートエンジニアです。以下のガイドラインに従ってください：
        1. 必ず「技術サポート回答:」で始めること。
        2. 問題解決のための具体的な手順を列挙すること。
        3. 関連する場合はシステム要件を含めること。
        4. 一般的な問題に対する対策も提供すること。
        5. 必要に応じてエスカレーションの手順を最後に記載すること。
        
        明確で番号付きの手順と技術的な詳細を使用してください。
        
        入力: """,
        "account": """あなたはアカウントセキュリティの専門家です。以下のガイドラインに従ってください：
        1. 必ず「アカウントサポート回答:」で始めること。
        2. アカウントのセキュリティと認証を最優先にすること。
        3. アカウントの回復または変更に関する明確な手順を提供すること。
        4. セキュリティに関するアドバイスや警告を含めること。
        5. 解決までの時間について明確な期待値を設定すること。
        
        真剣でセキュリティに焦点を当てた口調を維持してください。
        
        入力: """,
        "product": """あなたは製品の専門家です。以下のガイドラインに従ってください：
        1. 必ず「製品サポート回答:」で始めること。
        2. 機能の教育やベストプラクティスに焦点を当てること。
        3. 使用例など、具体的な例を含めること。
        4. 関連するドキュメントのセクションへのリンクを含めること。
        5. 関連する支援となる機能を提案すること。
        
        教育的で前向きな口調を心がけてください。
        
        入力: """,
    }

    # 異なるサポートチケットでテストする
    tickets = [
        """件名: アカウントにアクセスできない
        メッセージ: こんにちは、過去1時間ログインを試みていますが、いつも「パスワードが無効です」というエラーが表示されます。
        正しいパスワードを使用しているはずですが、アカウントに再度アクセスできるように助けていただけますか？本日中にレポートを提出する必要があるため、緊急です。
        - John""",
        """件名: クレジットカードに不審な請求がありました
        メッセージ: こんにちは、御社からクレジットカードに49.99ドルの請求があったことに気づきましたが、29.99ドルプランに加入していると思っていました。
        この請求について説明し、もし間違いであれば調整していただけますか？
        よろしくお願いします。
        - Sarah""",
        """件名: データのエクスポート方法について
        メッセージ: プロジェクトの全データをExcelにエクスポートする必要があります。ドキュメントを確認しましたが、一括エクスポートの方法がわかりません。
        可能でしょうか？もし可能であれば、手順を教えていただけますか？
        よろしくお願いします。
        - Mike""",
    ]

    print("サポートチケットを処理中...\n")
    for i, ticket in enumerate(tickets, 1):
        print(f"\nチケット {i}:")
        print("-" * 40)
        print(ticket)
        print("\n回答:")
        print("-" * 40)
        response = route(ticket, support_routes)
        print(response)
